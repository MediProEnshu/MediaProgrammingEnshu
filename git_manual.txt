###### 主なブランチ
- master: 完成品を入れる
- develop: 試運転が完了したプログラムを入れる

###### 主要なgitコマンド
- fetch: リモートブランチの最新情報を取る.
- merge: 指定したブランチの変更内容を反映する.
- pull: fetch + merge
- add: コミットするファイルを追加.
- commit: 編集内容の保存.
- push: 変更内容をリモートに反映させる(新しく作ったブランチには-fをつける).
- checkout: ブランチを移動(新しくブランチ作り移動する場合は-bをつける).
- branch: 今いるブランチとローカルにあるブランチを表示.
- status: 新しいファイル、編集したファイル、コミットしたファイルを表示.

###### git開発手順

0. (必要なら)リモートのdevelopから最新の情報を持ってきて反映.  
`git pull origin develop`

1. developからブランチを生やす(ブランチ名は追加する機能など).  
`git checkout -b ブランチの名前`

2. 作業をする.

3. コミットするファイルの追加.  
`git add 編集したファイル1 編集したファイル2 編集したファイルN `

4. addしたファイルのコミット.  
`git commit -m "好きなメッセージ(編集の要約など)"`

5. ブランチのプッシュ(共有してるリポジトリに登録)
`git push -f origin ブランチの名前`


- 注意:
 - あるブランチAの内容に基づき細分化させた作業B, Cをする場合は、AからブランチB, Cを生やしてください.
 - masterやdevelopでpushすると共有してるリポジトリにあるそれらのファイルが書き換わってしまいます(masterやdevelopに変更を反映するときは、ターミナルでなくgithubからマージする).
 - 同じファイルを別々の人が編集すると下に示すような悲劇が起きるので、出来るだけそうならないようにしたいです.
 - 下のような場合、コンフリクトが起きます.その場合、一旦修正をすべて元に戻し、リモートの内容をマージしてからもう一度編集してください.
   1. AブランチからBとCを生やす.
   2. XさんがB, YさんがCで作業する.
   3. 2人が同じファイルの同じ場所を編集する.
   4. XさんがAにpushする
   5. YさんがAにpushしようとすると、どちらの変更を反映すべきかわからないので、コンフリクトする.
   6. この場合、Yさんは編集したファイルを完全に元に戻し、一旦AからpullしてBの内容を取り込む.
   7. Yさんはもう一度編集し、Aにpushする.
